# Combined Python Codebase
# Generated on: 2025-04-09 05:39:43.012784
# Source directory: /home/admin/Plus91Backoffice/plus91_management/app/models


================================================================================
# File: non_tradable_logs.py
================================================================================

from sqlalchemy import Column, Integer, String, Text, Date, TIMESTAMP, func
from app.models.base import Base

class NonTradableLog(Base):
    __tablename__ = "non_tradable_logs"

    id = Column(Integer, primary_key=True)
    account_id = Column(String, nullable=False)
    trading_symbol = Column(String, nullable=False)
    reason = Column(Text)
    event_date = Column(Date, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    def __repr__(self):
        return f"<NonTradableLog(id={self.id}, account_id={self.account_id}, trading_symbol={self.trading_symbol})>"

================================================================================
# File: base.py
================================================================================

from sqlalchemy.orm import declarative_base

Base = declarative_base()

================================================================================
# File: report.py
================================================================================

from pydantic import BaseModel


class RequestData(BaseModel):
    broker_code: str
    pan_no: str

================================================================================
# File: __init__.py
================================================================================

from .accounts import (
    AccountActualPortfolio,
    AccountActualPortfolioException,
    AccountBracketBasketAllocation,
    AccountCashflow,
    AccountCashflowProgression,
    AccountIdealPortfolio,
    AccountPerformance,
    AccountTimePeriods,
    JointAccount,
    JointAccountMapping,
    SingleAccount,
)

from .clients import (
    Broker,
    Client,
    Distributor,
)

from .portfolio import (
    Basket,
    BasketStockMapping,
    Bracket,
    PfBracketBasketAllocation,
    PortfolioBasketMapping,
    PortfolioTemplate,
)

from .non_tradable_logs import NonTradableLog
from .report import RequestData
from .stock_exceptions import StockException
from .stock_ltps import StockLTP

================================================================================
# File: stock_ltps.py
================================================================================

from sqlalchemy import Column, Integer, String, Float, TIMESTAMP, func
from app.models.base import Base

class StockLTP(Base):
    __tablename__ = "stock_ltps"

    id = Column(Integer, primary_key=True)
    trading_symbol = Column(String, unique=True, nullable=False)
    ltp = Column(Float, nullable=False)
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    def __repr__(self):
        return f"<StockLTP(id={self.id}, trading_symbol={self.trading_symbol}, ltp={self.ltp})>"

================================================================================
# File: stock_exceptions.py
================================================================================

from sqlalchemy import Column, Integer, String, TIMESTAMP, func
from app.models.base import Base

class StockException(Base):
    __tablename__ = "stock_exceptions"

    id = Column(Integer, primary_key=True)
    account_id = Column(String, nullable=False)
    trading_symbol = Column(String, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    def __repr__(self):
        return f"<StockException(id={self.id}, account_id={self.account_id}, trading_symbol={self.trading_symbol})>"

================================================================================
# File: portfolio/basket_stock_mapping.py
================================================================================

from sqlalchemy import Column, Integer, Text, Float, TIMESTAMP, ForeignKey
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.models.base import Base


class BasketStockMapping(Base):
    __tablename__ = "basket_stock_mapping"

    basket_stock_mapping_id = Column(Integer, primary_key=True, autoincrement=True)
    basket_id = Column(Integer, ForeignKey("basket_details.basket_id", ondelete="CASCADE"), nullable=False)
    trading_symbol = Column(Text, nullable=False)
    multiplier = Column(Float, nullable=False)

    basket = relationship("Basket", back_populates="stock_mappings")

    def __repr__(self):
        return f"<BasketStockMapping(id={self.basket_stock_mapping_id}, symbol={self.trading_symbol})>"


================================================================================
# File: portfolio/portfolio_template_details.py
================================================================================

from sqlalchemy import Column, Integer, Text, TIMESTAMP, func
from sqlalchemy.orm import relationship
from app.models.base import Base

class PortfolioTemplate(Base):
    __tablename__ = "portfolio_template_details"

    portfolio_id = Column(Integer, primary_key=True, autoincrement=True)
    portfolio_name = Column(Text, nullable=False)
    description = Column(Text, nullable=True)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    accounts = relationship("SingleAccount", back_populates="portfolio_template")
    joint_accounts = relationship("JointAccount", back_populates="portfolio_template")
    pf_bracket_basket_allocations = relationship("PfBracketBasketAllocation", back_populates="portfolio_template")
    basket_mappings = relationship("PortfolioBasketMapping", back_populates="portfolio", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<PortfolioTemplate(id={self.portfolio_id}, name={self.portfolio_name})>"

================================================================================
# File: portfolio/portfolio_basket_mapping.py
================================================================================

from sqlalchemy import Column, Integer, ForeignKey, Float, TIMESTAMP, func
from sqlalchemy.orm import relationship
from app.models.base import Base

class PortfolioBasketMapping(Base):
    __tablename__ = "portfolio_basket_mapping"

    portfolio_basket_mapping_id = Column(Integer, primary_key=True, autoincrement=True)
    portfolio_id = Column(Integer, ForeignKey("portfolio_template_details.portfolio_id", ondelete="CASCADE"), nullable=False)
    basket_id = Column(Integer, ForeignKey("basket_details.basket_id", ondelete="CASCADE"), nullable=False)
    allocation_pct = Column(Float, nullable=True)

    portfolio = relationship("PortfolioTemplate", back_populates="basket_mappings")
    basket = relationship("Basket", back_populates="portfolio_mappings")

    def __repr__(self):
        return f"<PortfolioBasketMapping(id={self.portfolio_basket_mapping_id}, portfolio_id={self.portfolio_id}, basket_id={self.basket_id})>"

================================================================================
# File: portfolio/__init__.py
================================================================================

from .basket_details import Basket
from .basket_stock_mapping import BasketStockMapping
from .bracket_details import Bracket
from .pf_bracket_basket_allocation import PfBracketBasketAllocation
from .portfolio_basket_mapping import PortfolioBasketMapping
from .portfolio_template_details import PortfolioTemplate

================================================================================
# File: portfolio/bracket_details.py
================================================================================

from sqlalchemy import Column, Integer, Float, Text, TIMESTAMP, func
from sqlalchemy.orm import relationship
from app.models.base import Base


class Bracket(Base):
    __tablename__ = "bracket_details"

    bracket_id = Column(Integer, primary_key=True, autoincrement=True)
    bracket_min = Column(Float, nullable=False)
    bracket_max = Column(Float, nullable=False)
    bracket_name = Column(Text, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    accounts = relationship("SingleAccount", back_populates="bracket")
    joint_accounts = relationship("JointAccount", back_populates="bracket")
    pf_bracket_basket_allocations = relationship("PfBracketBasketAllocation", back_populates="bracket", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Bracket(id={self.bracket_id}, name={self.bracket_name})>"

================================================================================
# File: portfolio/basket_details.py
================================================================================

from sqlalchemy import Column, Integer, Text, TIMESTAMP, CheckConstraint
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.models.base import Base

class Basket(Base):
    __tablename__ = "basket_details"

    basket_id = Column(Integer, primary_key=True)
    basket_name = Column(Text, nullable=False)
    allocation_method = Column(Text, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    __table_args__ = (
        CheckConstraint(
            "allocation_method IN ('equal','manual')",
            name="basket_allocation_method_check"
        ),
    )

    stock_mappings = relationship("BasketStockMapping", back_populates="basket", cascade="all, delete-orphan")
    pf_bracket_basket_allocations = relationship("PfBracketBasketAllocation", back_populates="basket")
    portfolio_mappings = relationship("PortfolioBasketMapping", back_populates="basket", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Basket(basket_id={self.basket_id}, name={self.basket_name})>"

================================================================================
# File: portfolio/pf_bracket_basket_allocation.py
================================================================================

from sqlalchemy import Column, Integer, Float, TIMESTAMP, func, ForeignKey, CheckConstraint
from sqlalchemy.orm import relationship
from app.models.base import Base

class PfBracketBasketAllocation(Base):
    __tablename__ = "pf_bracket_basket_allocation"

    allocation_id = Column(Integer, primary_key=True, autoincrement=True)
    bracket_id = Column(Integer, ForeignKey("bracket_details.bracket_id"), nullable=True)
    basket_id = Column(Integer, ForeignKey("basket_details.basket_id"), nullable=True)
    portfolio_id = Column(Integer, ForeignKey("portfolio_template_details.portfolio_id"), nullable=True)
    allocation_pct = Column(Float, nullable=False, default=0)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    __table_args__ = (
        CheckConstraint("allocation_pct >= 0", name="allocation_pct_positive"),
    )

    bracket = relationship("Bracket", back_populates="pf_bracket_basket_allocations")
    basket = relationship("Basket", back_populates="pf_bracket_basket_allocations")
    portfolio_template = relationship("PortfolioTemplate", back_populates="pf_bracket_basket_allocations")

    def __repr__(self):
        return f"<PfBracketBasketAllocation(id={self.allocation_id}, allocation_pct={self.allocation_pct})>"

================================================================================
# File: clients/broker_details.py
================================================================================

from sqlalchemy import Column, String, Text, TIMESTAMP, func, text
from sqlalchemy.orm import relationship
from app.models.base import Base


class Broker(Base):
    __tablename__ = "broker_details"

    broker_id = Column(
        String,
        primary_key=True,
        server_default=text("CONCAT('BROKER_', LPAD(NEXTVAL('broker_seq')::TEXT, 4, '0'))")
    )
    broker_name = Column(Text, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    clients = relationship("Client", back_populates="broker")

    def __repr__(self):
        return f"<Broker(id={self.broker_id}, name={self.broker_name})>"



================================================================================
# File: clients/client_details.py
================================================================================

from sqlalchemy import (
    Column, String, Text, TIMESTAMP, ForeignKey, UniqueConstraint, text   
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import Base

class Client(Base):
    __tablename__ = "client_details"

    client_id = Column(
        String,
        primary_key=True,
        server_default=text("CONCAT('CLIENT_', LPAD(NEXTVAL('client_seq')::TEXT, 6, '0'))")
    )
    account_id = Column(String, ForeignKey("single_account.single_account_id", ondelete="SET NULL"), nullable=True)
    client_name = Column(Text, nullable=False)
    broker_id = Column(String, ForeignKey("broker_details.broker_id", ondelete="SET NULL"), nullable=True)
    broker_code = Column(Text, nullable=True)
    broker_passwd = Column(Text, nullable=True)
    pan_no = Column(String, nullable=False)
    phone_no = Column(Text, nullable=True)
    country_code = Column(Text, nullable=True)
    email_id = Column(Text, nullable=True)
    addr = Column(Text, nullable=True)
    acc_start_date = Column(String, nullable=True)
    distributor_id = Column(String, ForeignKey("distributor_details.distributor_id", ondelete="SET NULL"), nullable=True)
    type = Column(Text, nullable=True)
    alias_name = Column(Text, nullable=True)
    alias_phone_no = Column(String, nullable=True)
    alias_addr = Column(Text, nullable=True)
    onboard_status = Column(Text, default="pending")
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now()) 

    __table_args__ = (
        UniqueConstraint('broker_id', 'pan_no', name='unique_broker_id_pan'),
    )

    distributor = relationship("Distributor", back_populates="clients")
    broker = relationship("Broker", back_populates="clients")
    account = relationship("SingleAccount", back_populates="client", uselist=False)

    @property
    def broker_name(self):
        return self.broker.broker_name if self.broker else None
    
    @property
    def distributor_name(self):
        return self.distributor.name if self.distributor else None

    def __repr__(self): 
        return f"<Client(client_id={self.client_id}, name={self.client_name})>"

================================================================================
# File: clients/__init__.py
================================================================================

from .broker_details import Broker
from .client_details import Client
from .distributor_details import Distributor

================================================================================
# File: clients/distributor_details.py
================================================================================

from sqlalchemy import Column, String, Text, TIMESTAMP, func, text
from sqlalchemy.orm import relationship
from app.models.base import Base


class Distributor(Base):
    __tablename__ = "distributor_details"

    distributor_id = Column(
        String,
        primary_key=True,
        server_default=text("CONCAT('DIST_', LPAD(NEXTVAL('distributor_seq')::TEXT, 5, '0'))")
    )
    name = Column(Text, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    clients = relationship("Client", back_populates="distributor")

    def __repr__(self):
        return f"<Distributor(id={self.distributor_id}, name={self.name})>"


================================================================================
# File: accounts/joint_account_mapping.py
================================================================================

from sqlalchemy import Column, String, Integer, ForeignKey
from sqlalchemy.orm import relationship
from app.models.base import Base


class JointAccountMapping(Base):
    __tablename__ = "joint_account_mapping"

    joint_account_mapping_id = Column(Integer, primary_key=True)
    joint_account_id = Column(
        String,
        ForeignKey("joint_account.joint_account_id", ondelete="CASCADE"),
        nullable=False
    )
    account_id = Column(
        String,
        ForeignKey("single_account.single_account_id", ondelete="CASCADE"),
        nullable=False
    )

    joint_account = relationship("JointAccount", back_populates="joint_account_mappings")

    def __repr__(self):
        return f"<JointAccountMapping(id={self.joint_account_mapping_id})>"

================================================================================
# File: accounts/joint_account.py
================================================================================

from sqlalchemy import (
    Column, String, Text, TIMESTAMP, Float, Integer, func, ForeignKey, text
)
from sqlalchemy.orm import relationship
from app.models.base import Base

class JointAccount(Base):
    __tablename__ = "joint_account"

    joint_account_id = Column(
        String,
        primary_key=True,
        server_default=text("CONCAT('JACC_', LPAD(NEXTVAL('joint_account_seq')::TEXT, 6, '0'))")
    )
    joint_account_name = Column(Text, nullable=False)
    account_type = Column(String, nullable=False, default="joint")
    portfolio_id = Column(Integer, ForeignKey("portfolio_template_details.portfolio_id"), nullable=True)
    bracket_id = Column(Integer, ForeignKey("bracket_details.bracket_id"), nullable=True)
    pf_value = Column(Float, default=0)
    cash_value = Column(Float, default=0)
    total_holdings = Column(Float, default=0)
    invested_amt = Column(Float, default=0)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    portfolio_template = relationship("PortfolioTemplate", back_populates="joint_accounts")
    bracket = relationship("Bracket", back_populates="joint_accounts")
    
    performance = relationship(
        "AccountPerformance",
        uselist=False,
        back_populates="joint_account",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountPerformance.owner_id), "
                    "AccountPerformance.owner_type=='joint')",
        overlaps="performance,single_account"
    )

    actual_portfolios = relationship(
        "AccountActualPortfolio",
        back_populates="joint_account",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountActualPortfolio.owner_id), "
                    "AccountActualPortfolio.owner_type=='joint')",
        overlaps="actual_portfolios,single_account"
    )

    ideal_portfolios = relationship(
        "AccountIdealPortfolio",
        back_populates="joint_account",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountIdealPortfolio.owner_id), "
                    "AccountIdealPortfolio.owner_type=='joint')",
        overlaps="ideal_portfolios,single_account"
    )
    
    cashflow_details = relationship(
        "AccountCashflow",
        back_populates="joint_account",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountCashflow.owner_id), "
                    "AccountCashflow.owner_type=='joint')",
        overlaps="cashflow_details,single_account"
    )
    
    time_periods = relationship(
        "AccountTimePeriods",
        back_populates="joint_account",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountTimePeriods.owner_id), "
                    "AccountTimePeriods.owner_type=='joint')",
        overlaps="time_periods,single_account"
    )

    actual_portfolio_exceptions = relationship(
        "AccountActualPortfolioException",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountActualPortfolioException.owner_id), "
                    "AccountActualPortfolioException.owner_type == 'joint')",
        back_populates="joint_account"
    )

    joint_account_mappings = relationship("JointAccountMapping", back_populates="joint_account")

    def __repr__(self):
        return f"<JointAccount(joint_account_id={self.joint_account_id}, name={self.joint_account_name})>"

================================================================================
# File: accounts/account_bracket_basket_allocation.py
================================================================================

from sqlalchemy import Column, Integer, String, Float, Boolean, TIMESTAMP, func, ForeignKey, CheckConstraint
from app.models.base import Base

class AccountBracketBasketAllocation(Base):
    __tablename__ = "account_bracket_basket_allocation"

    id = Column(Integer, primary_key=True)
    account_id = Column(String, nullable=False)
    account_type = Column(String, nullable=False)
    bracket_id = Column(Integer, ForeignKey("bracket_details.bracket_id"), nullable=False)
    basket_id = Column(Integer, ForeignKey("basket_details.basket_id"), nullable=False)
    allocation_pct = Column(Float, nullable=False)
    is_custom = Column(Boolean, default=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    __table_args__ = (
        CheckConstraint("account_type IN ('single', 'joint')", name="account_type_check"),
    )

    def __repr__(self):
        return f"<AccountBracketBasketAllocation(id={self.id}, account_id={self.account_id}, allocation_pct={self.allocation_pct})>"

================================================================================
# File: accounts/account_performance.py
================================================================================

from sqlalchemy import Column, String, Float, TIMESTAMP, func
from app.models.accounts.owner_mixin import OwnerMixin
from sqlalchemy.orm import relationship
from app.models.base import Base

class AccountPerformance(Base, OwnerMixin):
    __tablename__ = "account_performance"

    performance_id = Column(String, primary_key=True)
    total_twrr = Column(Float)
    current_yr_twrr = Column(Float)
    cagr = Column(Float)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())  # Added

    single_account = relationship(
        "SingleAccount",
        back_populates="performance",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountPerformance.owner_id), "
                    "AccountPerformance.owner_type=='single')",
        overlaps="performance,joint_account"
    )

    joint_account = relationship(
        "JointAccount",
        back_populates="performance",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountPerformance.owner_id), "
                    "AccountPerformance.owner_type=='joint')",
        overlaps="performance,single_account"
    )

    def __repr__(self):
        return f"<AccountPerformance(owner_id={self.owner_id}, total_twrr={self.total_twrr})>" 

================================================================================
# File: accounts/account_cashflow_progression.py
================================================================================

from sqlalchemy import Column, Integer, String, Float, Date, TIMESTAMP, func, CheckConstraint
from app.models.base import Base

class AccountCashflowProgression(Base):
    __tablename__ = "account_cashflow_progression"

    id = Column(Integer, primary_key=True)
    owner_id = Column(String, nullable=False)
    owner_type = Column(String, nullable=False)
    event_date = Column(Date, nullable=False)
    cashflow = Column(Float, nullable=False)
    portfolio_value = Column(Float, nullable=False)
    portfolio_plus_cash = Column(Float, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    __table_args__ = (
        CheckConstraint("owner_type IN ('single', 'joint')", name="owner_type_check"),
    )

    def __repr__(self):
        return f"<AccountCashflowProgression(id={self.id}, owner_id={self.owner_id}, event_date={self.event_date})>"

================================================================================
# File: accounts/owner_mixin.py
================================================================================

from sqlalchemy import Column, String, CheckConstraint


class OwnerMixin:
    owner_id = Column(String, nullable=False)
    owner_type = Column(String, nullable=False)

    __table_args__ = (
        CheckConstraint("owner_type IN ('single','joint')", name="owner_type_check"),
    )
    

================================================================================
# File: accounts/account_actual_portfolio_exceptions.py
================================================================================

from sqlalchemy import (
    Column, Integer, String, Float, TIMESTAMP, func, CheckConstraint, UniqueConstraint
)
from sqlalchemy.orm import relationship
from app.models.base import Base

class AccountActualPortfolioException(Base):
    __tablename__ = "account_actual_portfolio_exceptions"

    id = Column(Integer, primary_key=True, autoincrement=True)
    owner_id = Column(String(255), nullable=False)
    owner_type = Column(String(10), nullable=False)
    trading_symbol = Column(String(50), nullable=False)
    quantity = Column(Float, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    __table_args__ = (
        CheckConstraint("owner_type IN ('single', 'joint')", name="owner_type_check"),
        CheckConstraint("quantity >= 0", name="quantity_positive"),
        UniqueConstraint("owner_id", "owner_type", "trading_symbol", name="unique_exception"),
    )
    single_account = relationship(
        "SingleAccount",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountActualPortfolioException.owner_id), "
                    "AccountActualPortfolioException.owner_type == 'single')",
        back_populates="actual_portfolio_exceptions",
        overlaps="actual_portfolio_exceptions,joint_account"
    )
    joint_account = relationship(
        "JointAccount",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountActualPortfolioException.owner_id), "
                    "AccountActualPortfolioException.owner_type == 'joint')",
        back_populates="actual_portfolio_exceptions",
        overlaps="actual_portfolio_exceptions,single_account"
    )

    def __repr__(self):
        return f"<AccountActualPortfolioException(id={self.id}, owner_id={self.owner_id}, trading_symbol={self.trading_symbol}, quantity={self.quantity})>"

================================================================================
# File: accounts/account_ideal_portfolio.py
================================================================================

from sqlalchemy import Column, Integer, String, Float, TIMESTAMP, Text, func, Date
from app.models.accounts.owner_mixin import OwnerMixin
from sqlalchemy.orm import relationship
from app.models.base import Base

class AccountIdealPortfolio(Base):

    __tablename__ = 'account_ideal_portfolio'

    owner_id = Column(String, primary_key=True)
    owner_type = Column(String, nullable=False)
    snapshot_date = Column(Date, primary_key=True)
    trading_symbol = Column(Text, primary_key=True)
    basket = Column(Text, nullable=False)
    allocation_pct = Column(Float, nullable=False)
    investment_amount = Column(Float, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.current_timestamp())
    updated_at = Column(TIMESTAMP, server_default=func.current_timestamp())

    single_account = relationship(
        "SingleAccount",
        back_populates="ideal_portfolios",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountIdealPortfolio.owner_id), "
                    "AccountIdealPortfolio.owner_type=='single')",
        overlaps="ideal_portfolios,joint_account"
    )
    joint_account = relationship(
        "JointAccount",
        back_populates="ideal_portfolios",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountIdealPortfolio.owner_id), "
                    "AccountIdealPortfolio.owner_type=='joint')",
        overlaps="ideal_portfolios,single_account"
    )

    def __repr__(self):
        return f"<AccountIdealPortfolio(owner_id={self.owner_id}, symbol={self.trading_symbol})>"

================================================================================
# File: accounts/account_actual_portfolio.py
================================================================================

from sqlalchemy import Column, String, Text, Float, TIMESTAMP, ForeignKey, Date
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.models.accounts.owner_mixin import OwnerMixin
from app.models.base import Base

class AccountActualPortfolio(Base):

    __tablename__ = 'account_actual_portfolio'

    owner_id = Column(String, primary_key=True)
    owner_type = Column(String, nullable=False)
    snapshot_date = Column(Date, primary_key=True) 
    trading_symbol = Column(Text, primary_key=True)
    quantity = Column(Float, nullable=False)
    market_value = Column(Float, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.current_timestamp())
    updated_at = Column(TIMESTAMP, server_default=func.current_timestamp())

    single_account = relationship(
        "SingleAccount",
        back_populates="actual_portfolios",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountActualPortfolio.owner_id), "
                    "AccountActualPortfolio.owner_type=='single')",
        overlaps="actual_portfolios,joint_account"
    )
    joint_account = relationship(
        "JointAccount",
        back_populates="actual_portfolios",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountActualPortfolio.owner_id), "
                    "AccountActualPortfolio.owner_type=='joint')",
        overlaps="actual_portfolios,single_account"
    )

    def __repr__(self):
        return f"<AccountActualPortfolio(owner_id={self.owner_id}, symbol={self.trading_symbol})>"

================================================================================
# File: accounts/account_cashflow_details.py
================================================================================

from sqlalchemy import Column, Integer, Text, Float, Date, TIMESTAMP, func
from app.models.accounts.owner_mixin import OwnerMixin
from sqlalchemy.orm import relationship
from app.models.base import Base

class AccountCashflow(Base, OwnerMixin):
    __tablename__ = "account_cashflow_details"

    cashflow_id = Column(Integer, primary_key=True, autoincrement=True)
    event_date = Column(Date, nullable=False)
    cashflow = Column(Float, nullable=False)
    tag = Column(Text, nullable=True)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())

    single_account = relationship(
        "SingleAccount",
        back_populates="cashflow_details",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountCashflow.owner_id), "
                    "AccountCashflow.owner_type=='single')",
        overlaps="cashflow_details,joint_account"
    )

    joint_account = relationship(
        "JointAccount",
        back_populates="cashflow_details",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountCashflow.owner_id), "
                    "AccountCashflow.owner_type=='joint')",
        overlaps="cashflow_details,single_account"
    )
    
    def __repr__(self):
        return f"<AccountCashflow(id={self.cashflow_id}, owner_id={self.owner_id})>"

================================================================================
# File: accounts/__init__.py
================================================================================

from .account_actual_portfolio import AccountActualPortfolio
from .account_actual_portfolio_exceptions import AccountActualPortfolioException
from .account_bracket_basket_allocation import AccountBracketBasketAllocation
from .account_cashflow_details import AccountCashflow
from .account_cashflow_progression import AccountCashflowProgression
from .account_ideal_portfolio import AccountIdealPortfolio
from .account_performance import AccountPerformance
from .account_time_periods import AccountTimePeriods
from .joint_account import JointAccount
from .joint_account_mapping import JointAccountMapping
from .single_account import SingleAccount

================================================================================
# File: accounts/single_account.py
================================================================================

from sqlalchemy import Column, String, Text, TIMESTAMP, Float, func, ForeignKey, text, Integer
from sqlalchemy.orm import relationship
from app.models.base import Base

class SingleAccount(Base):
    __tablename__ = "single_account"
    
    single_account_id = Column(
        String,
        primary_key=True,
        server_default=text("CONCAT('ACC_', LPAD(NEXTVAL('single_account_seq')::TEXT, 6, '0'))")
    )
    account_name = Column(Text, nullable=False)
    account_type = Column(String, nullable=False, default='single')
    portfolio_id = Column(Integer, ForeignKey("portfolio_template_details.portfolio_id"), nullable=True)
    bracket_id = Column(Integer, ForeignKey("bracket_details.bracket_id"), nullable=True)
    pf_value = Column(Float, default=0)
    cash_value = Column(Float, default=0)
    total_holdings = Column(Float, default=0)
    invested_amt = Column(Float, default=0)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=False, server_default=func.now())

    portfolio_template = relationship("PortfolioTemplate", back_populates="accounts")
    bracket = relationship("Bracket", back_populates="accounts")

    performance = relationship(
        "AccountPerformance",
        uselist=False,
        back_populates="single_account",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountPerformance.owner_id), "
                    "AccountPerformance.owner_type=='single')",
        overlaps="performance,joint_account"
    )

    actual_portfolios = relationship(
        "AccountActualPortfolio",
        back_populates="single_account",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountActualPortfolio.owner_id), "
                    "AccountActualPortfolio.owner_type=='single')",
        overlaps="actual_portfolios,joint_account"
    )
    ideal_portfolios = relationship(
        "AccountIdealPortfolio",
        back_populates="single_account",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountIdealPortfolio.owner_id), "
                    "AccountIdealPortfolio.owner_type=='single')",
        overlaps="ideal_portfolios,joint_account"
    )
    
    cashflow_details = relationship(
        "AccountCashflow",
        back_populates="single_account",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountCashflow.owner_id), "
                    "AccountCashflow.owner_type=='single')",
        overlaps="cashflow_details,joint_account"
    )
    
    time_periods = relationship(
        "AccountTimePeriods",
        back_populates="single_account",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountTimePeriods.owner_id), "
                    "AccountTimePeriods.owner_type=='single')",
        overlaps="time_periods,joint_account"
    )
    
    actual_portfolio_exceptions = relationship(
        "AccountActualPortfolioException",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountActualPortfolioException.owner_id), "
                    "AccountActualPortfolioException.owner_type == 'single')",
        back_populates="single_account"
    )

    client = relationship("Client", back_populates="account")

    def __repr__(self):
        return f"<Account(single_account_id={self.single_account_id}, name={self.account_name})>"

================================================================================
# File: accounts/account_time_periods.py
================================================================================

from sqlalchemy import Column, String, Integer, Float, Date, TIMESTAMP, func
from app.models.accounts.owner_mixin import OwnerMixin
from sqlalchemy.orm import relationship
from app.models.base import Base

class AccountTimePeriods(Base, OwnerMixin):
    __tablename__ = "account_time_periods"

    owner_id = Column(String, primary_key=True)
    owner_type = Column(String, nullable=False)
    time_period_id = Column(Integer, primary_key=True, autoincrement=True)
    start_date = Column(Date, nullable=False)
    start_value = Column(Float, nullable=False)
    end_date = Column(Date, nullable=False)
    end_value = Column(Float, nullable=False)
    returns = Column(Float, nullable=False)
    returns_1 = Column(Float)
    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=True, onupdate=func.now())  # Added

    single_account = relationship(
        "SingleAccount",
        back_populates="time_periods",
        primaryjoin="and_(SingleAccount.single_account_id == foreign(AccountTimePeriods.owner_id), "
                    "AccountTimePeriods.owner_type=='single')",
        overlaps="time_periods,joint_account"
    )

    joint_account = relationship(
        "JointAccount",
        back_populates="time_periods",
        primaryjoin="and_(JointAccount.joint_account_id == foreign(AccountTimePeriods.owner_id), "
                    "AccountTimePeriods.owner_type=='joint')",
        overlaps="time_periods,single_account"
    )

    def __repr__(self):
        return f"<AccountTimePeriods(id={self.time_period_id}, owner_id={self.owner_id})>"

================================================================================
# Summary: Processed 30 Python files
# End of combined codebase
